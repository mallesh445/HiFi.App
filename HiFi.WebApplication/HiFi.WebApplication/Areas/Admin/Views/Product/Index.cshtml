@model IEnumerable<HiFi.WebApplication.Areas.Admin.ViewModels.ProductViewModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_ALayout.cshtml";
}

    <section class="container-fluid">
        <div class="clearfix panel-body MainHeaderColor">
            <div class="pull-left MainHeaderColor" style="font-size: 26px;">Products List</div>
            <div></div>
            <div class="pull-right">
                <a class="btn bg-blue" asp-action="Create"><i class="fa fa-plus-square"></i>Add New</a>
                <button type="button" class="btn bg-olive" data-toggle="modal" data-target="#myModal">
                    <i class="fa fa-download"></i> Import
                </button>
                <button type="button" class="btn btn-success" id="btnExportData">
                    <i class="fa fa-upload"></i>
                    Export
                </button>
            </div>
        </div>
        <div class="content panel-body">
            <div id="WrapTables">
                <table id="adminProductTable" class="table">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.ProductId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.ProductName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.ModelNumber)
                            </th>
                            <td>
                                @Html.DisplayNameFor(model => model.SerialNumber)
                            </td>
                            @*<th>
                                @Html.DisplayNameFor(model => model.ShortDescription)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Quantity)
                            </th>*@
                            <th>
                                @Html.DisplayNameFor(model => model.Price)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.SubCategoryId)
                            </th>
                            <th>
                                <div>Image</div>
                            </th>
                            <th>Operations</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.ProductId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ProductName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ModelNumber)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SerialNumber)
                            </td>
                            @*<td>
                                @Html.DisplayFor(modelItem => item.ShortDescription)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Quantity)
                            </td>*@
                            <td>
                                @Html.DisplayFor(modelItem => item.Price)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SubCategoryId)
                            </td>
                            <td>
                                @if (@item.ProductImageModel != null && item.ProductImageModel.Count > 0 && item.ProductImageModel[0].FKProductId == item.ProductId)
                                {
                                    <div>
                                        <img src="@item.ProductImageModel[0]?.ImagePath" width="90%"
                                             style="border-radius:5px;border:1px solid #bbb9b9; height: 50px; width: 50px;" />
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <img src="~/Images/default-product.png"
                                             style="border-radius:5px;border:1px solid #bbb9b9; height: 50px; width: 50px;" />
                                    </div>
                                }
                            </td>
                            @Html.Partial("_TableButtonPartial", item.ProductId)
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                @using (Html.BeginForm("ImporProducts", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dissmiss="modal" aria-hidden="true">X</button>
                            <h4 class="modal-title" id="myModalLabel">Import Products from Excel</h4>
                        </div>

                        <div class="modal-body">
                            <div class="form-group">
                                <p>
                                    Imported Products are distinguished by ID. If the ID already exists, then its corresponding category will be updated. You should not specify ID (leave 0) for new categories.
                                    Import requires a lot of memory resources. That's why it's not recommended to import more than 100 - 200 records at once.
                                </p>
                                <div class="col-md-2">
                                    <div class="label-wrapper" style="margin-top:10px">
                                        <label class="control-label">
                                            Excel file
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-10">
                                    <input type="file" class="form-control" name="postedExcelFile" id="excelfileId" placeholder="Id" />
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <a href="~/Excel/Product List Data.xlsx" download="ProductImportTemplate" style="float:left">Sample Template</a>
                            <button type="submit" class="btn btn-primary">Add</button>
                            <button type="button" class="btn btn-primary" id="btnUpdate" style="display:none;" onclick="Update();">Update</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                }

            </div>
        </div>
        @if (TempData["Success"] != null)
        {
            <div id="myFlashMessageDiv" class="alert alert-success alert-dismissible fade in" style="background-color:#bcf5bc">
                <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                <strong>Success!</strong> @TempData["Success"].ToString().
            </div>

        }
        @if (TempData["Error"] != null)
        {
            <div id="myFlashMessageDiv" class="alert alert-danger alert-dismissible fade in">
                <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                <strong>Error!</strong> @TempData["Error"].ToString().
            </div>
        }
    </section>

@section scripts{

    <script type="text/javascript">
        $(document).ready(function () {
            $("#myFlashMessageDiv").show().delay(2000).fadeOut();

            $('#btnExportData').click(function () {
                $("#adminProductTable").table2excel({
                    // exclude: ".excludeThisClass",
                    //name: "Worksheet Name",
                    filename: "Products.xls" //do not include extension
                });
            });
            
            //var wed = $('#adminProductTable').DataTable({
            //    bSort: true,

            //    'aoColumns': [
            //        { sWidth: "25%", bSearchable: true, bSortable: true, className: "dt-left" },
            //        { sWidth: "20%", bSearchable: true, bSortable: true, className: "dt-left" },
            //        { sWidth: "10%", bSearchable: true, bSortable: true, className: "dt-left" },
            //        { sWidth: "22%", bSearchable: true, bSortable: true, className: "dt-left" },
            //        { sWidth: "22%", bSearchable: true, bSortable: true, className: "dt-left" },
            //        { sWidth: "10%", bSearchable: true, bSortable: true },
            //        { sWidth: "45%", bSearchable: true, bSortable: true }
            //        //{ sWidth: "10%", bSearchable: true, bSortable: true },
            //        //match the number of columns here for table1
            //    ],
            //    "bAutoWidth": false,
            //    "aLengthMenu": [[5, 10, 25, -1], [5, 10, 25, "All"]],
            //    "info": true,
            //    "paging": true,
            //    "fnInitComplete": function () {

            //        $("#adminProductTable").css("width", "100%");
            //    }
            //});
        })
    </script>
}
